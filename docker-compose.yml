version: "3"
services:
  kong:
    container_name: Kong
    image: kong:3.3.1-alpine
    user: root
    environment:
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_DATABASE=off
      - KONG_PROXY_LISTEN=0.0.0.0:${GATEWAY_PORT}
    volumes:
      - ./Kong/kong.yml:/usr/local/kong/declarative/kong.template.yml
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      - nightbase
    command: >
      sh -c "apk add gettext &&
      envsubst < /usr/local/kong/declarative/kong.template.yml > /usr/local/kong/declarative/kong.yml &&
      kong start -v"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      authservice:
        condition: service_started
  postgres:
    container_name: PostgresDB
    image: postgres:16.0-alpine3.18
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    networks:
      - nightbase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  rabbitmq:
    container_name: nb-rabbitmq
    image: rabbitmq:3.12.6-alpine
    networks:
      - nightbase
  authservice:
    container_name: AuthService
    build:
      context: ./microservices/Auth
      dockerfile: Dockerfile
    networks:
      - nightbase
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - PORT=5000
      - BROKER_HOST=rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm run db:generate && npm run start:prod"
  userservice:
    container_name: UserService
    build:
      context: ./microservices/User
      dockerfile: Dockerfile
    networks:
      - nightbase
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - PORT=5000
      - BROKER_HOST=rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm run db:generate && npm run start:prod"



networks:
  nightbase:
    driver: bridge
